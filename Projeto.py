"""

Integrantes do Grupo:
- Breno Gustavo dos Santos - RM: 557509
- Allan Baeza - RM: 556771
- Livia Oliveira - RM: 556281

Descrição:
Este projeto foi desenvolvido como parte da Sprint 4. 
Ele consiste em um sistema de CRUD para gerenciar serviços de manutenção de veículos,
com integração a banco de dados, exportação em JSON e consumo de uma API externa.
"""

import cx_Oracle
import json
import requests  # Para consumir uma API externa
from datetime import datetime

# Conexão com o banco de dados Oracle
def conectar_banco():
    dsn = cx_Oracle.makedsn("oracle.fiap.com.br", 1521, sid="ORCL")
    conn = cx_Oracle.connect(user="RM557509", password="280905", dsn=dsn)
    return conn


# Inicializa a tabela no banco de dados
def criar_tabela_servicos():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('''BEGIN
                        EXECUTE IMMEDIATE 'CREATE TABLE servicos (
                            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                            nome VARCHAR2(100),
                            preco NUMBER(10, 2)
                        )';
                     EXCEPTION
                        WHEN OTHERS THEN
                          IF SQLCODE != -955 THEN
                            RAISE;
                          END IF;
                     END;''')
    conn.commit()
    conn.close()

# CRUD Operations
def inserir_servico(nome, preco):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO servicos (nome, preco) VALUES (:1, :2)", (nome, preco))
    conn.commit()
    conn.close()

def consultar_servicos():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM servicos")
    servicos = cursor.fetchall()
    conn.close()
    return servicos

def editar_servico(id_servico, novo_nome, novo_preco):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("UPDATE servicos SET nome = :1, preco = :2 WHERE id = :3", (novo_nome, novo_preco, id_servico))
    conn.commit()
    conn.close()

def excluir_servico(id_servico):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM servicos WHERE id = :1", (id_servico,))
    conn.commit()
    conn.close()

# Exporta dados em JSON
def exportar_dados_json():
    servicos = consultar_servicos()
    dados = [{"id": servico[0], "nome": servico[1], "preco": servico[2]} for servico in servicos]
    with open("servicos.json", "w") as file:
        json.dump(dados, file, indent=4)
    print("Dados exportados para servicos.json")

# Consome API externa para conversão de USD para BRL
def obter_taxa_cambio():
    try:
        response = requests.get("https://api.exchangerate-api.com/v4/latest/BRL")
        if response.status_code == 200:
            data = response.json()
            return data.get("rates", {}).get("USD", "Taxa indisponível")
        else:
            print("Erro ao acessar a API")
    except Exception as e:
        print(f"Erro ao consumir API: {e}")
    return None

# Menus e submenus
def menu_servico():
    criar_tabela_servicos()  # Garante que a tabela foi criada

    while True:
        print('\n--- Menu de Serviços ---')
        print('1 - Exibir serviços')
        print('2 - Adicionar serviço')
        print('3 - Editar serviço')
        print('4 - Excluir serviço')
        print('5 - Exportar serviços para JSON')
        print('6 - Voltar')
        
        try:
            opcao = int(input('Escolha uma opção: '))
            if opcao == 1:
                servicos = consultar_servicos()
                for servico in servicos:
                    print(f'ID: {servico[0]}, Serviço: {servico[1]}, Preço: R$ {servico[2]}')
            elif opcao == 2:
                nome = input("Nome do serviço: ")
                preco = float(input("Preço do serviço: "))
                inserir_servico(nome, preco)
                print("Serviço adicionado!")
            elif opcao == 3:
                id_servico = int(input("ID do serviço: "))
                novo_nome = input("Novo nome: ")
                novo_preco = float(input("Novo preço: "))
                editar_servico(id_servico, novo_nome, novo_preco)
                print("Serviço editado!")
            elif opcao == 4:
                id_servico = int(input("ID do serviço: "))
                excluir_servico(id_servico)
                print("Serviço excluído!")
            elif opcao == 5:
                exportar_dados_json()
            elif opcao == 6:
                break
            else:
                print("Opção inválida.")
        except ValueError:
            print("Erro: escolha uma opção válida.")

def main():
    while True:
        print('\n--- Menu Principal ---')
        print('1 - Acessar serviços')
        print('2 - Gerenciar serviços (CRUD)')
        print('3 - Consultar taxa de câmbio USD-BRL')
        print('4 - Sair')

        try:
            opcao = int(input('Escolha uma opção: '))
            if opcao == 1:
                servicos = consultar_servicos()
                for servico in servicos:
                    print(f'ID: {servico[0]}, Serviço: {servico[1]}, Preço: R$ {servico[2]}')
            elif opcao == 2:
                menu_servico()
            elif opcao == 3:
                taxa = obter_taxa_cambio()
                print(f"Taxa de câmbio USD-BRL: {taxa}")
            elif opcao == 4:
                print("Saindo... Obrigado!")
                break
            else:
                print("Opção inválida.")
        except ValueError:
            print("Erro: escolha uma opção válida.")

if __name__ == "__main__":
    main()
